.TH "clienthandler_t" 3 "Quarta, 25 de Janeiro de 2012" "servw" \" -*- nroff -*-
.ad l
.nh
.SH NAME
clienthandler_t \- 
.PP
O responsavel por fornecer o servico ao cliente'\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <client\&.h>\fP
.SS "Campos de Dados"

.in +1c
.ti -1c
.RI "int \fBclient\fP"
.br
.RI "\fISocket do cliente servido'\&. \fP"
.ti -1c
.RI "int \fBstate\fP"
.br
.RI "\fIEstado em que se encontra o handler'\&. \fP"
.ti -1c
.RI "char \fBrequest\fP [BUFFER_SIZE *3]"
.br
.RI "\fIToda a request HTTP solicitada pelo cliente'\&. \fP"
.ti -1c
.RI "int \fBrequest_size\fP"
.br
.RI "\fITamanho de caracteres que 'request' suporta'\&. \fP"
.ti -1c
.RI "char \fBfilepath\fP [BUFFER_SIZE]"
.br
.RI "\fILocalizacao do arquivo que o cliente solicitou'\&. \fP"
.ti -1c
.RI "int \fBfilestatus\fP"
.br
.RI "\fIIndica se o arquivo existe ou qual erro esta associado a ele'\&. \fP"
.ti -1c
.RI "char \fBfilestatusmsg\fP [BUFFER_SIZE]"
.br
.RI "\fIMensagem equivalente ao status do arquivo'\&. \fP"
.ti -1c
.RI "FILE * \fBfilep\fP"
.br
.RI "\fIArquivo que o cliente pede'\&. \fP"
.ti -1c
.RI "int \fBfilesize\fP"
.br
.RI "\fITamanho do arquivo solicitado'\&. \fP"
.ti -1c
.RI "int \fBfilesentsize\fP"
.br
.RI "\fITamanho que ja foi enviado do arquivo como um todo'\&. \fP"
.ti -1c
.RI "time_t \fBfilelastm\fP"
.br
.RI "\fIData de ultima modificacao do arquivo'\&. \fP"
.ti -1c
.RI "char \fBfilebuff\fP [BUFFER_SIZE]"
.br
.RI "\fIBuffer onde serao guardadas partes temporarias do arquivo'\&. \fP"
.ti -1c
.RI "char \fBanswer\fP [BUFFER_SIZE]"
.br
.RI "\fIHeader a ser enviado como resposta ao cliente, antes do arquivo'\&. \fP"
.ti -1c
.RI "int \fBanswer_size\fP"
.br
.RI "\fIO tamanho total do header'\&. \fP"
.ti -1c
.RI "int \fBsize_left\fP"
.br
.RI "\fIQuanto do arquivo (caso exista) ainda precisa ser enviado ao cliente'\&. \fP"
.ti -1c
.RI "int \fBsize_sent\fP"
.br
.RI "\fIQuanto do arquivo (caso exista) ja foi enviado ao cliente'\&. \fP"
.ti -1c
.RI "char \fBfileerror\fP [BUFFER_SIZE]"
.br
.ti -1c
.RI "int \fBfileerrorsize\fP"
.br
.RI "\fISe houver algum erro relacionado ao arquivo, sua mensagem estara aqui (no formato de pagina HTML) para ser enviada ao cliente'\&. \fP"
.ti -1c
.RI "char * \fBoutput\fP"
.br
.RI "\fIPonteiro que vai indicar o que vai ser enviado - o erro ou o header'\&. \fP"
.ti -1c
.RI "int \fBneed_file_chunk\fP"
.br
.in -1c
.SH "Descrição Detalhada"
.PP 
O responsavel por fornecer o servico ao cliente'\&. 

Recebe a request, efetua os ajustes necessarios e envia a resposta'\&. Cada \fBclienthandler_t\fP equivale a um cliente'\&. Ou seja, cada \fBclienthandler_t\fP tem que possuir todos os recursos necessarios para atender um cliente independentemente entre si'\&. 
.SH "Campos"
.PP 
.SS "int \fBclienthandler_t::client\fP"
.PP
Socket do cliente servido'\&. 
.SS "int \fBclienthandler_t::fileerrorsize\fP"
.PP
Se houver algum erro relacionado ao arquivo, sua mensagem estara aqui (no formato de pagina HTML) para ser enviada ao cliente'\&. Tamanho da pagina HTML de erro 
.SS "char \fBclienthandler_t::filepath\fP[BUFFER_SIZE]"
.PP
Localizacao do arquivo que o cliente solicitou'\&. 
.SS "int \fBclienthandler_t::filestatus\fP"
.PP
Indica se o arquivo existe ou qual erro esta associado a ele'\&. Seus valores sao os mesmos da especificacao HTTP (status codes)'\&. 
.SS "char \fBclienthandler_t::filestatusmsg\fP[BUFFER_SIZE]"
.PP
Mensagem equivalente ao status do arquivo'\&. 
.SS "char \fBclienthandler_t::request\fP[BUFFER_SIZE *3]"
.PP
Toda a request HTTP solicitada pelo cliente'\&. 
.SS "int \fBclienthandler_t::request_size\fP"
.PP
Tamanho de caracteres que 'request' suporta'\&. 
.SS "int \fBclienthandler_t::size_left\fP"
.PP
Quanto do arquivo (caso exista) ainda precisa ser enviado ao cliente'\&. 
.SS "int \fBclienthandler_t::size_sent\fP"
.PP
Quanto do arquivo (caso exista) ja foi enviado ao cliente'\&. 

.SH "Autor"
.PP 
Gerado automaticamente por Doxygen para servw a partir de seu código-fonte'\&.
